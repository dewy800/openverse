"""
# Create filtered index DAG factory

This module creates the filtered index creation DAGs for each media type
using a factory function.

Filtered index creation is handled by the ingestion server. The DAGs generated
by the ``build_create_filtered_index_dag`` function in this module are
responsible for triggering the ingestion server action to create and populate
the filtered index for a given media type. The DAG awaits the completion
of the filtered index creation and then points the filtered index alias for the
media type to the newly created index.

## When this DAG runs

The DAGs generated in this module are triggered by the data refresh DAGs.
Maintaining this process separate from the data refresh DAGs, while still
triggering it there, allows us to run filtered index creation independently
of the full data refresh. This is primarily useful in two cases: for testing
changes to the filtered index creation; and for re-running filtered index
creation if an urgent change to the sensitive terms calls for an immediate
recreation of the filtered indexes.

## Race conditions

Because filtered index creation employs the ``reindex`` Elasticsearch API
to derive the filtered index from an existing index, we need to be mindful
of the race condition that potentially exists between the data refresh DAG
and this DAG. The race condition is caused by the fact that the data refresh
DAG always deletes the previous index once the new index for the media type
is finished being created. Consider the situation where filtered index creation
is triggered to run during a data refresh. The filtered index is being derived
from the previous index for the media type. Once the data refresh is finished,
it will delete that index, causing the reindex to halt because suddenly it has
no data source from which to pull documents.

There are two mechanisms that prevent this from happening:

1. The filtered index creation DAGs are not allowed to run if a data refresh
for the media type is already running.
2. The data refresh DAGs will wait for any pre-existing filtered index creation
DAG runs for the media type to finish before continuing.

This ensures that neither are depending on or modifying the origin indexes
critical for the creation of the filtered indexes.

Because the data refresh DAG triggers the filtered index creation DAG, we do
allow a ``force`` param to be passed to the DAGs generated by this module.
This parameter is only for use by the data refresh DAG and should not be
used when manually triggering the DAG unless you are absolutely certain
of what you are doing.
"""
import uuid
from datetime import datetime, timedelta

from airflow.decorators import task
from airflow.models import DAG
from airflow.models.param import Param
from airflow.operators.python import PythonOperator

from common import ingestion_server
from common.constants import DAG_DEFAULT_ARGS, XCOM_PULL_TEMPLATE
from data_refresh import dag_factory
from data_refresh.data_refresh_types import DATA_REFRESH_CONFIGS


def build_create_filtered_index_dag(media_type: str):
    dag_id = f"create_filtered_{media_type}_index"
    target_alias = f"{media_type}-filtered"

    @task(
        task_id=f"prevent_concurrency_with_{media_type}_data_refresh",
    )
    def prevent_concurrency_with_data_refresh(force: bool):
        if force:
            return

        data_refresh = getattr(dag_factory, f"{media_type}_data_refresh")
        if data_refresh.get_active_runs():
            raise ValueError(f"{media_type} data refresh is currently running.")

    def create_and_populate_filtered_index(
        origin_index_suffix: str | None,
        destination_index_suffix: str | None,
    ):
        create_payload = {}
        if origin_index_suffix:
            create_payload["origin_index_suffix"] = origin_index_suffix
        if destination_index_suffix:
            create_payload["destination_index_suffix"] = destination_index_suffix

        return ingestion_server.trigger_and_wait_for_task(
            action="CREATE_AND_POPULATE_FILTERED_INDEX",
            model=media_type,
            data=create_payload or None,
            timeout=timedelta(days=1),
        )

    def point_alias(destination_index_suffix: str):
        point_alias_payload = {
            "alias": target_alias,
            "index_suffix": f"{destination_index_suffix}-filtered",
        }

        return ingestion_server.trigger_task(
            action="POINT_ALIAS",
            model=media_type,
            data=point_alias_payload,
        )

    dag = DAG(
        default_args=DAG_DEFAULT_ARGS,
        dag_id=dag_id,
        schedule=None,
        start_date=datetime(2023, 4, 1),
        tags=["data_refresh"],
        max_active_runs=1,
        catchup=False,
        doc_md=__doc__,
        params={
            "force": Param(
                default=False,
                type="boolean",
                description=(
                    "Bypass data refresh concurrency check. "
                    "Should only ever be used by the data_refresh "
                    "DAGs when triggering filtered index creation "
                    "at the end of a data refresh. This should not "
                    "be used when manually running this DAG "
                    "unless you're absolutely sure of what you're "
                    "doing. This check exists to prevent race "
                    "conditions and should not be ignored lightly."
                ),
            ),
            "origin_index_suffix": Param(
                default=None,
                type=["string", "null"],
                description=(
                    "See https://github.com/WordPress/openverse/blob/7427bbd4a8178d05a27e6fef07d70905ec7ef16b/ingestion_server/ingestion_server/indexer.py#L495-L497. "  # noqa: E501                    "For manual runs this can be left out if the new "
                    f"filtered alias should be based on the ``{media_type}`` alias."
                ),
            ),
            "destination_index_suffix": Param(
                default=None,
                type=["string", "null"],
                description=(
                    "See https://github.com/WordPress/openverse/blob/7427bbd4a8178d05a27e6fef07d70905ec7ef16b/ingestion_server/ingestion_server/indexer.py#L498-L502. "  # noqa: E501
                    "For manual runs this should be left out. This setting should "
                    "not conflict with another existing suffix or index creation "
                    "will fail."
                ),
            ),
        },
        render_template_as_native_obj=True,
    )

    with dag:
        prevent_concurrency = prevent_concurrency_with_data_refresh(
            force="{{ params.force }}",
        )

        # If a destination index suffix isn't provided, we need to generate
        # one so that we know where to point the alias
        generate_index_suffix = PythonOperator(
            task_id="generate_index_suffix",
            op_args=["{{ params.destination_index_suffix }}"],
            python_callable=lambda destination_index_suffix: destination_index_suffix
            or uuid.uuid4().hex,
        )

        destination_index_suffix = XCOM_PULL_TEMPLATE.format(
            generate_index_suffix.task_id, "return_value"
        )

        get_current_index = ingestion_server.get_current_index(target_alias)

        do_create = create_and_populate_filtered_index(
            origin_index_suffix="{{ params.origin_index_suffix }}",
            destination_index_suffix=destination_index_suffix,
        )

        do_point_alias = point_alias(destination_index_suffix=destination_index_suffix)

        delete_old_index = ingestion_server.trigger_task(
            action="DELETE_INDEX",
            model=data_refresh.media_type,
            data={
                "index_suffix": XCOM_PULL_TEMPLATE.format(
                    get_current_index.task_id, "return_value"
                ),
            },
        )

        (
            prevent_concurrency
            >> generate_index_suffix
            >> get_current_index
            >> do_create
            >> do_point_alias
            >> delete_old_index
        )

    return dag


for data_refresh in DATA_REFRESH_CONFIGS:
    filtered_index_creation_dag = build_create_filtered_index_dag(
        data_refresh.media_type
    )
    globals()[filtered_index_creation_dag.dag_id] = filtered_index_creation_dag
